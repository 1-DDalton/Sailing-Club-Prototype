/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boatprototype;


import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author danka
 */



public class OOD_Report extends javax.swing.JFrame {


    
    /**
     * Creates new form Events
     */
    public OOD_Report() {
        initComponents();
        try {
            //table_update();
            EventIDCbo_update();
//            memberNameCbo_update();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(OOD_Report.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }

    
    public class Race {
        //Create a Boat class to help with transferring data database to jTable
        private String class_name;
        private String sail_number;
        private String event_id;
        private String full_name;
        
        public String getClassName() {
            return class_name;
        }

        public void setClassName(String className) {
            this.class_name = className;
        }

        public String getSailNumber() {
            return sail_number;
        }

        public void setSailNumber(String sailNumber) {
            this.sail_number = sailNumber;
        }

        public String getEventId() {
            return event_id;
        }

        public void setEventId(String eventId) {
            this.event_id = eventId;
        }

        
        public String getFullName() {
            return full_name;
        }

        public void setFullName(String fullName) {
            this.full_name = fullName;
        }
        
    }
    
    public class Duty {
        //Create a Boat class to help with transferring data database to jTable
        private int duty_id;
        private String duty_name;
        private String event_id;
        private String member_id;
        private String full_name;
        
        public int getDutyID() {
            return duty_id;
        }

        public void setDutyID(int dutyId) {
            this.duty_id = dutyId;
        }

        public String getDutyName() {
            return duty_name;
        }

        public void setDutyName(String dutyName) {
            this.duty_name = dutyName;
        }

        public String getEventId() {
            return event_id;
        }

        public void setEventId(String eventId) {
            this.event_id = eventId;
        }

        public String getMemberId() {
            return member_id;
        }

        public void setMemberId(String memberId) {
            this.member_id = memberId;
        }
        
        public String getFullName() {
            return full_name;
        }

        public void setFullName(String fullName) {
            this.full_name = fullName;
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    Connection conn;
    PreparedStatement statement;    
    
    private void table_update() throws SQLException, ClassNotFoundException{
        Object eventId = eventIDCbo.getSelectedItem();
        //Object eventId = eventIDCbo.getSelectedItem();

       
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://computing.gfmat.org:3306/DDalton_SailingClub?user=DDalton&useSSL=true", "DDalton", "7r66JBe3A8");
            //SELECT Duty_Sign_In.*, Members.Full_Name FROM Duty_Sign_In, Members WHERE Duty_Sign_In.Membership_ID = Duty_Sign_In.Membership_ID
            statement = conn.prepareStatement("SELECT * FROM Race_Sign_In WHERE Race_Sign_In.Event_ID = '"+eventId.toString()+"'");
            //statement = conn.prepareStatement("SELECT * FROM Duty_Sign_In WHERE Event_ID = '"+eventId.toString()+"'");
            ResultSet rs = statement.executeQuery();
            //System.out.println("executed query");
            
                ArrayList<Race> list = new ArrayList();
                while(rs.next()){         
                    // Create a boat object using the Boat Class
                    //System.out.println("writing to Duty object");
                    Race race = new Race();
                    //Add data to the boat object from the ResultSet
                    race.setClassName(rs.getString("Class"));
                    race.setSailNumber(rs.getString("Sail_Number"));
                    race.setEventId(rs.getString("Event_ID"));
                    race.setFullName(rs.getString("Full_Name"));
                    //Add the data from the boat object to the next row of the list object
                    list.add(race);
                } 

                
                //Add data from array of Boat objects to eventsTbl
                DefaultTableModel model = (DefaultTableModel)raceTbl.getModel();   
                model.setRowCount(0);    
                //Create a 2 dimensional array with 3 elements
                Object rowData[] = new Object[3];  
                //Fill up the array with the the next row of data from the list
                for(int i = 0; i <list.size(); i++){ 
                        //System.out.println("Writing to jttable");
                        rowData[0] = list.get(i).full_name;
                        rowData[1] = list.get(i).class_name; 
                        rowData[2] = list.get(i).sail_number;
                        //Add the data from thew array into the next row in eventsTbl via the model
                        model.addRow(rowData);
                    }

        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://computing.gfmat.org:3306/DDalton_SailingClub?user=DDalton&useSSL=true", "DDalton", "7r66JBe3A8");
            //SELECT Duty_Sign_In.*, Members.Full_Name FROM Duty_Sign_In, Members WHERE Duty_Sign_In.Membership_ID = Duty_Sign_In.Membership_ID
            statement = conn.prepareStatement("SELECT Duty_Sign_In.*, Members.Full_Name FROM Duty_Sign_In, Members WHERE Duty_Sign_In.Membership_ID = Members.Membership_ID AND Event_ID = '"+eventId.toString()+"'");
            //statement = conn.prepareStatement("SELECT * FROM Duty_Sign_In WHERE Event_ID = '"+eventId.toString()+"'");
            ResultSet rsd = statement.executeQuery();
            //System.out.println("executed query");
            
                ArrayList<Duty> list_Duty = new ArrayList();
                while(rsd.next()){         
                    // Create a boat object using the Boat Class
                    //System.out.println("writing to Duty object");
                    Duty duty = new Duty();
                    //Add data to the boat object from the ResultSet
                    duty.setDutyID(rsd.getInt("Duty_ID"));
                    duty.setDutyName(rsd.getString("Duty_Name"));
                    duty.setEventId(rsd.getString("Event_ID"));
                    duty.setMemberId(rsd.getString("Membership_ID"));
                    duty.setFullName(rsd.getString("Full_Name"));
                    //Add the data from the boat object to the next row of the list object
                    list_Duty.add(duty);
                } 

                
                //Add data from array of Boat objects to eventsTbl
                DefaultTableModel model_duty = (DefaultTableModel)dutiesTbl.getModel();   
                model_duty.setRowCount(0);    
                //Create a 2 dimensional array with 3 elements
                Object rowData_Duty[] = new Object[3];  
                //Fill up the array with the the next row of data from the list
                for(int i = 0; i <list_Duty.size(); i++){ 
                        //System.out.println("Writing to jttable");
                        rowData_Duty[0] = list_Duty.get(i).full_name;
                        rowData_Duty[1] = list_Duty.get(i).duty_name;
                        rowData_Duty[2] = list_Duty.get(i).member_id;                        
                        //Add the data from thew array into the next row in eventsTbl via the model
                        model_duty.addRow(rowData_Duty);
                    }
            
            
            
            
            
        } catch (SQLException ex) {
            System.out.println("errorMessage"+ ex);
        }    
            
            
            
            
        } catch (SQLException ex) {
            System.out.println("errorMessage"+ ex);
        }
        
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        dutyTbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        ood_Report = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        raceTbl = new javax.swing.JTable();
        homeBtn = new javax.swing.JButton();
        eventDetailsPnl = new javax.swing.JPanel();
        eventNameLbl1 = new javax.swing.JLabel();
        eventDateLbl1 = new javax.swing.JLabel();
        eventStartTimeLbl1 = new javax.swing.JLabel();
        eventNameTxt = new javax.swing.JTextField();
        eventIDLbl = new javax.swing.JLabel();
        eventDateTxt = new javax.swing.JTextField();
        eventStartTimeTxt = new javax.swing.JTextField();
        eventIDCbo = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        dutiesTbl = new javax.swing.JTable();

        dutyTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Member Name", "Duty Name", "Member ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dutyTbl.getTableHeader().setReorderingAllowed(false);
        dutyTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dutyTblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dutyTbl);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(252, 4, 4));

        ood_Report.setBackground(new java.awt.Color(252, 4, 4));
        ood_Report.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ood_Report.setForeground(new java.awt.Color(255, 255, 255));
        ood_Report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Test/PSCLogoSmall.PNG"))); // NOI18N
        ood_Report.setText("OOD Report");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(ood_Report, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ood_Report, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        raceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Helm Name", "Class", "Sail No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        raceTbl.getTableHeader().setReorderingAllowed(false);
        raceTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                raceTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(raceTbl);
        if (raceTbl.getColumnModel().getColumnCount() > 0) {
            raceTbl.getColumnModel().getColumn(0).setResizable(false);
            raceTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        homeBtn.setText("Back To Home");
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        eventDetailsPnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Event Details:"));

        eventNameLbl1.setText("Name");

        eventDateLbl1.setText("Date");

        eventStartTimeLbl1.setText("Start Time");

        eventNameTxt.setEditable(false);
        eventNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventNameTxtActionPerformed(evt);
            }
        });

        eventIDLbl.setText("Event ID");

        eventDateTxt.setEditable(false);
        eventDateTxt.setToolTipText("YYYY-MM-DD");

        eventStartTimeTxt.setEditable(false);
        eventStartTimeTxt.setToolTipText("HH:MM:SS");

        eventIDCbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventIDCboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventDetailsPnlLayout = new javax.swing.GroupLayout(eventDetailsPnl);
        eventDetailsPnl.setLayout(eventDetailsPnlLayout);
        eventDetailsPnlLayout.setHorizontalGroup(
            eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventDetailsPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventStartTimeLbl1)
                    .addComponent(eventDateLbl1)
                    .addComponent(eventNameLbl1)
                    .addComponent(eventIDLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(eventDateTxt)
                    .addComponent(eventStartTimeTxt)
                    .addComponent(eventIDCbo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        eventDetailsPnlLayout.setVerticalGroup(
            eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventDetailsPnlLayout.createSequentialGroup()
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIDLbl)
                    .addComponent(eventIDCbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventNameLbl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventDateLbl1)
                    .addComponent(eventDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventStartTimeLbl1)
                    .addComponent(eventStartTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        dutiesTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Member Name", "Duty Name", "Member ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(dutiesTbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventDetailsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eventDetailsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        eventDetailsPnl.getAccessibleContext().setAccessibleName("Event Details");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EventIDCbo_update() throws SQLException, ClassNotFoundException{
        try {
                 
            conn = DriverManager.getConnection("jdbc:mysql://computing.gfmat.org:3306/DDalton_SailingClub?user=DDalton&useSSL=true", "DDalton", "7r66JBe3A8");
            statement = conn.prepareStatement("SELECT Event_ID FROM Events");
            ResultSet rs = statement.executeQuery();
            while(rs.next()) 
            {
                eventIDCbo.addItem(rs.getString("Event_ID"));
     
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(OOD_Report.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }    

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_homeBtnActionPerformed

    private void raceTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_raceTblMouseClicked


    }//GEN-LAST:event_raceTblMouseClicked

    private void eventNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventNameTxtActionPerformed

    private void eventIDCboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventIDCboActionPerformed
    
        String selectedItem = eventIDCbo.getSelectedItem().toString();
      
        
        try {
                 
            conn = DriverManager.getConnection("jdbc:mysql://computing.gfmat.org:3306/DDalton_SailingClub?user=DDalton&useSSL=true", "DDalton", "7r66JBe3A8");
            statement = conn.prepareStatement("SELECT Event_Name, Event_Date, Event_Start_Time FROM Events WHERE Event_ID = '"+selectedItem+"'");
            ResultSet rs = statement.executeQuery();
            while(rs.next()) 
            {
                eventNameTxt.setText(rs.getString("Event_Name"));
                eventDateTxt.setText(rs.getString("Event_Date"));
                eventStartTimeTxt.setText(rs.getString("Event_Start_Time"));     
            }
                   
            table_update();
            
        } catch (SQLException ex) {
            Logger.getLogger(OOD_Report.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OOD_Report.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }//GEN-LAST:event_eventIDCboActionPerformed

    private void dutyTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dutyTblMouseClicked

    }//GEN-LAST:event_dutyTblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OOD_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OOD_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OOD_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OOD_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OOD_Report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dutiesTbl;
    private javax.swing.JTable dutyTbl;
    private javax.swing.JLabel eventDateLbl1;
    private javax.swing.JTextField eventDateTxt;
    private javax.swing.JPanel eventDetailsPnl;
    private javax.swing.JComboBox<String> eventIDCbo;
    private javax.swing.JLabel eventIDLbl;
    private javax.swing.JLabel eventNameLbl1;
    private javax.swing.JTextField eventNameTxt;
    private javax.swing.JLabel eventStartTimeLbl1;
    private javax.swing.JTextField eventStartTimeTxt;
    private javax.swing.JButton homeBtn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel ood_Report;
    private javax.swing.JTable raceTbl;
    // End of variables declaration//GEN-END:variables
}
